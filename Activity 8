Task 1: Connect to the AWS CLI Host via SSH
Task 1.1: SSH for Windows Users
‚Ä¢	Use PuTTY with .ppk file.
‚Ä¢	Enable keep-alives: Connection ‚Üí Seconds between keepalives ‚Üí 30.
‚Ä¢	Auth path: Connection > SSH > Auth ‚Üí Browse labsuser.ppk.
‚Ä¢	Host IP: Use public IPv4 of CLI Host EC2 instance.
‚Ä¢	Username: ec2-user.
Task 1.2: SSH for macOS/Linux Users
‚Ä¢	Use terminal with .pem key.
‚Ä¢	Navigate to PEM location:
cd ~/Downloads
‚Ä¢	Change permission:
chmod 400 labsuser.pem
‚Ä¢	Get public IPv4 address from EC2 instance.
‚Ä¢	Connect via SSH:
ssh -i labsuser.pem ec2-user@<public-ip>
________________________________________
Task 1.3: Configure AWS CLI
Run in terminal:
bash
CopyEdit
curl http://169.254.169.254/latest/dynamic/instance-identity/document | grep region
Run CLI configuration:
bash
CopyEdit
aws configure
Provide:
‚Ä¢	AWS Access Key ID
‚Ä¢	AWS Secret Access Key
‚Ä¢	Region (e.g., us-east-1)
‚Ä¢	Output format: json

Task 2: Create and initialize the Amazon S3 share bucket using the AWS CLI (s3 subcommand):
________________________________________
‚úÖ Step 1: Create the S3 bucket
Run the following command in your SSH terminal. Replace:
‚Ä¢	xxxnnn ‚Üí with your initials and a random 3-digit number (e.g., rb123)
‚Ä¢	<region> ‚Üí with your AWS region (e.g., us-east-1, us-west-2, etc.)
bash
CopyEdit
aws s3 mb s3://mompopcafe-rb123 --region us-west-2
‚úîÔ∏è If successful, you'll see:
makefile
CopyEdit
make_bucket: mompopcafe-rb123
________________________________________
‚úÖ Step 2: Sync the initial images to the S3 bucket
Upload the files from the ~/initial-images/ directory to the bucket under the /images prefix:
bash
CopyEdit
aws s3 sync ~/initial-images/ s3://mompopcafe-rb123/images
‚úîÔ∏è You should see output similar to:
bash
CopyEdit
upload: ~/initial-images/img1.jpg to s3://mompopcafe-rb123/images/img1.jpg
upload: ~/initial-images/img2.jpg to s3://mompopcafe-rb123/images/img2.jpg
...
________________________________________
‚úÖ Step 3: Verify the uploaded images
List the contents of the /images prefix in your bucket, with a human-readable summary:
bash
CopyEdit
aws s3 ls s3://mompopcafe-rb123/images/ --human-readable --summarize
‚úîÔ∏è The output should look something like:
yaml
CopyEdit
2025-05-20 14:32:02     500.0 KiB img1.jpg
2025-05-20 14:32:02     200.0 KiB img2.jpg

Total Objects: 2
   Total Size: 700.0 KiB
________________________________________
üü¢ Done!
You‚Äôve successfully:
‚Ä¢	Created an S3 bucket
‚Ä¢	Uploaded sample images
‚Ä¢	Verified the upload with a detailed listing
‚úÖ Task 3: Review the media company user and permissions
________________________________________
üìò Task 3.1: Review the mompopuser IAM User
‚Ä¢	Go to IAM > Users > mompopuser.
‚Ä¢	Under Permissions, expand the AmazonS3ReadOnlyAccess policy.
o	‚úÖ S3 Actions Allowed:
ÔÇß	Full List permissions
ÔÇß	Limited Read permissions
o	‚úÖ S3 Resources Affected:
ÔÇß	All objects in S3 (as defined in the policy JSON)
________________________________________
üìò Task 3.2: Review the mediaco IAM Group
‚Ä¢	Go to IAM > User groups > mediaco.
‚Ä¢	Under Permissions, expand the policies:
‚úÖ IAMUserChangePassword
o	Allows group members to change their own password.
‚úÖ mediaCoPolicy
o	Statement 1 (AllowGroupToSeeBucketListInTheConsole)
ÔÇß	Lets users view the list of S3 buckets in the account (Console only).
o	Statement 2 (AllowRootLevelListingOfTheBucket)
ÔÇß	Lets users view top-level contents in the mompopcafe bucket.
o	Statement 3 (AllowUserSpecificActionsOnlyInTheSpecificPrefix)
ÔÇß	Grants read, write, delete access in mompopcafe-*/images folder:
ÔÇß	GetObject
ÔÇß	PutObject
ÔÇß	DeleteObject
ÔÇß	Version-related permissions included
________________________________________
üìò Task 3.3: Review the mediacouser IAM User
‚Ä¢	Go to IAM > Users > mediacouser.
‚Ä¢	Under Permissions, verify:
o	IAMUserChangePassword ‚úÖ
o	mediaCoPolicy ‚úÖ
‚Ä¢	Go to Groups tab, confirm membership in mediaco group.
‚Ä¢	Go to Security credentials tab > Access keys > Create access key
o	üîê Download the .csv file with Access Key & Secret Key
‚Ä¢	Copy your 12-digit AWS Account ID (without dashes).
o	Found in the top-right dropdown (voclabs/user...)
________________________________________
üß™ Task 3.4: Test mediacouser Permissions
üßë‚Äçüíª Open Incognito or different browser to login as mediacouser.
Steps:
1.	Go to: https://aws.amazon.com/console/
2.	Paste Account ID (no dashes), choose IAM user login.
3.	Login:
o	Username: mediacouser
o	Password: Training1!
________________________________________
‚úÖ S3 Tests (Bucket: mompopcafe-xxxnnn):
1.	üìÇ Navigate to images folder.
2.	üñºÔ∏è View: Open Donuts.jpg ‚Äì should load in new tab.
3.	‚¨ÜÔ∏è Upload: Upload a .png or .txt file ‚Äì should succeed.
4.	‚ùå Delete: Select Cup-of-Hot-Chocolate.jpg, delete it ‚Äì should succeed.
5.	üîí Unauthorized Test:
o	Try accessing Permissions tab at bucket level ‚Äì ‚ùå Access denied.
o	Try uploading file to root of bucket ‚Äì ‚ùå Operation denied.

‚úÖ Task 4.1: Create and Configure the SNS Topic
1. Create the SNS Topic
‚Ä¢	Go to Simple Notification Service (SNS) from the AWS Console.
‚Ä¢	Select Topics ‚Üí Create topic.
‚Ä¢	Choose Standard.
‚Ä¢	Enter Name: s3NotificationTopic.
‚Ä¢	Click Create topic.
2. Save the Topic ARN
‚Ä¢	Copy the Topic ARN (e.g., arn:aws:sns:us-east-1:123456789012:s3NotificationTopic) for use in upcoming steps.
________________________________________
3. Set the Access Policy
‚Ä¢	Go to your newly created topic ‚Üí click Edit.
‚Ä¢	Expand Access policy - optional.
‚Ä¢	Replace the JSON policy with the following (customize ARN and bucket name):
json
CopyEdit
{
  "Version": "2008-10-17",
  "Id": "S3PublishPolicy",
  "Statement": [
    {
      "Sid": "AllowPublishFromS3",
      "Effect": "Allow",
      "Principal": {
        "Service": "s3.amazonaws.com"
      },
      "Action": "SNS:Publish",
      "Resource": "arn:aws:sns:us-east-1:123456789012:s3NotificationTopic",
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:s3:::mompopcafe-xxxnnn"
        }
      }
    }
  ]
}
Replace:
‚Ä¢	"Resource" with your SNS Topic ARN
‚Ä¢	"aws:SourceArn" with your S3 bucket ARN (e.g., arn:aws:s3:::mompopcafe-xxxnnn)
‚Ä¢	Click Save changes.
________________________________________
4. Subscribe mompopuser (You) to the Topic
‚Ä¢	Still in SNS, choose Create subscription.
‚Ä¢	Protocol: Email
‚Ä¢	Endpoint: <your email address> (you must access this inbox)
‚Ä¢	Click Create subscription
‚Ä¢	Go to your email inbox ‚Üí confirm subscription via the Confirm subscription link.
________________________________________
‚úÖ Task 4.2: Add Event Notification to the S3 Bucket
1. Create the Notification Configuration File
‚Ä¢	Open terminal/SSH into your CLI Host instance
bash
CopyEdit
vi s3EventNotification.json
‚Ä¢	Press i to enter insert mode, then paste the following JSON (customized):
json
CopyEdit
{
  "TopicConfigurations": [
    {
      "TopicArn": "arn:aws:sns:us-east-1:123456789012:s3NotificationTopic",
      "Events": ["s3:ObjectCreated:*", "s3:ObjectRemoved:*"],
      "Filter": {
        "Key": {
          "FilterRules": [
            {
              "Name": "prefix",
              "Value": "images/"
            }
          ]
        }
      }
    }
  ]
}
Replace the "TopicArn" with your actual SNS topic ARN.
‚Ä¢	Press ESC, then type :wq to save and exit.
________________________________________
2. Apply the Event Notification to the S3 Bucket
Run this command in your SSH terminal:
bash
CopyEdit
aws s3api put-bucket-notification-configuration --bucket mompopcafe-xxxnnn --notification-configuration file://s3EventNotification.json
Replace mompopcafe-xxxnnn with your actual S3 bucket name.
________________________________________
3. Verify the Setup
‚Ä¢	Wait a moment and check your email inbox.
‚Ä¢	You should receive an email with subject: Amazon S3 Notification.
‚Ä¢	The body should look like:
json
CopyEdit
{
  "Service": "Amazon S3",
  "Event": "s3:TestEvent",
  "Time": "2025-05-20T06:04:27.405Z",
  "Bucket": "mompopcafe-xxxnnn",
  "RequestId": "...",
  "HostId": "..."
}

Task 5: Test the Amazon S3 Share Bucket Event Notifications! Here's a quick recap and checklist of what you did in this task to verify your S3 bucket configuration:
________________________________________
‚úÖ Step-by-step Summary & Validation Checklist
1. Configured AWS CLI with mediacouser credentials
‚Ä¢	Ran aws configure and entered:
o	Access Key ID & Secret Access Key from accessKeys.csv
o	Default region (kept unchanged)
o	Output format: json
________________________________________
2. Tested put-object event notification
‚Ä¢	Command:
bash
CopyEdit
aws s3api put-object --bucket <mompopcafe-xxxnnn> --key images/Caramel-Delight.jpg --body ~/new-images/Caramel-Delight.jpg
‚Ä¢	‚úÖ Email received with:
o	"eventName": "ObjectCreated:Put"
o	"key": "images/Caramel-Delight.jpg"
________________________________________
3. Tested get-object operation (no notification expected)
‚Ä¢	Command:
bash
CopyEdit
aws s3api get-object --bucket <mompopcafe-xxxnnn> --key images/Donuts.jpg Donuts.jpg
‚Ä¢	‚úÖ File downloaded
‚Ä¢	‚úÖ No email received (as expected ‚Äî get is not a tracked event)
________________________________________
4. Tested delete-object event notification
‚Ä¢	Command:
bash
CopyEdit
aws s3api delete-object --bucket <mompopcafe-xxxnnn> --key images/Strawberry-Tarts.jpg
‚Ä¢	‚úÖ Email received with:
o	"eventName": "ObjectRemoved:Delete"
o	"key": "images/Strawberry-Tarts.jpg"
________________________________________
5. Tested unauthorized action (put-object-acl)
‚Ä¢	Command:
bash
CopyEdit
aws s3api put-object-acl --bucket <mompopcafe-xxxnnn> --key images/Donuts.jpg --acl public-read
‚Ä¢	‚ùå Operation failed with:
plaintext
CopyEdit
An error occurred (AccessDenied) when calling the PutObjectAcl operation: Access Denied
‚Ä¢	‚úÖ Expected ‚Äî confirms permissions are correctly restricted
